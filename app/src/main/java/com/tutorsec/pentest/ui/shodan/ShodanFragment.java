package com.tutorsec.pentest.ui.shodan;

import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModelProviders;

import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.os.StrictMode;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.tutorsec.pentest.R;
import com.tutorsec.pentest.ui.home.HomeViewModel;
import com.tutorsec.pentest.ui.shodan.classes.DividerItemDecoration;
import com.tutorsec.pentest.ui.shodan.classes.Item;
import com.tutorsec.pentest.ui.shodan.classes.PostHTTP;
import com.tutorsec.pentest.ui.shodan.classes.ShodanAdapter;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.Connection.Response;
import org.jsoup.Connection.Method;

import static androidx.core.content.ContextCompat.getSystemService;

import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;

public class ShodanFragment extends Fragment {

    private Button btnBuscar01 = null;
    private EditText txtbusqueda = null;
    private TextView resultado = null;
    private ShodanAdapter mAdapter;
    private RecyclerView mRecyclerView;

    private ShodanViewModel shodanViewModel;

    public  String url_login = "https://account.shodan.io/login";
    String url_shodan = "https://www.shodan.io/search?query=";

    public Map<String, String> cookies;
    String user_  = "ass07573";
    String pass_  = "ass07573";
    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        shodanViewModel =ViewModelProviders.of(this).get(ShodanViewModel.class);
        View rootView = inflater.inflate(R.layout.fragment_shodan, container, false);

        mAdapter = new ShodanAdapter(getActivity().getBaseContext(), new ArrayList<Item>(0), new ShodanAdapter.PostItemListener() {
            @Override
            public void onPostClick(String id) {
               Toast.makeText(getActivity(), "Seleccionando : " + id, Toast.LENGTH_SHORT).show();

                ClipboardManager myClickboard = (ClipboardManager) getActivity().getBaseContext().getSystemService(Context.CLIPBOARD_SERVICE);
                //ClipboardManager myClickboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);
                ClipData myClip = ClipData.newPlainText("text", id);
                myClickboard.setPrimaryClip(myClip);
                //Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(id));
                //startActivity(browserIntent);
            }
        });







        mRecyclerView = (RecyclerView) rootView.findViewById(R.id.recyclerView);

        mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity().getBaseContext()));
        mRecyclerView.setAdapter(mAdapter);



        mRecyclerView.setHasFixedSize(true);
        RecyclerView.ItemDecoration itemDecoration = new DividerItemDecoration(getActivity().getBaseContext(), DividerItemDecoration.VERTICAL_LIST);
        mRecyclerView.addItemDecoration(itemDecoration);


        txtbusqueda = (EditText) rootView.findViewById(R.id.editText);
        btnBuscar01 = (Button) rootView.findViewById(R.id.button);
        btnBuscar01.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("yury:  entramos ...");
                //PostHTTP http = new PostHTTP();
                String datos = txtbusqueda.getText().toString();
                System.out.println("yury : buscando a :"+url_shodan+datos);
                //datos="linux";



                //http.execute(datos);
                try {
                    disableSSLCertCheck();
                    StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
                    StrictMode.setThreadPolicy(policy);
                    Response res = Jsoup
                            .connect(url_login).userAgent("Mozilla").ignoreHttpErrors(true).timeout(20 * 1000)
                            .data("username", user_)
                            .data("password", pass_)
                            .data("grant_type", "password")
                            .data("login_submit", "Login")
                            .data("continue", "https%3A%2F%2Fwww.shodan.io")
                            .method(Method.POST).ignoreContentType(true)
                            .execute();
                    cookies= res.cookies();


                    Document document = Jsoup.connect(url_shodan+datos).cookies(cookies).timeout(20 * 1000).get();

                   //Document document = Jsoup.parse(http.get());
                    //System.out.println("yury el get:"+document.body().html());
                    Elements myin = document.getElementsByClass("search-result");
                    int i = 0;
                    String s[] = new String[myin.size()];
                    String data_devuelta = "";
                    String ip_ = "";
                    String server_ = "";
                    int indice = 1;
                    List<Item> lista_ = new LinkedList<Item>();
                    for (Element elementos : myin) {
                        Item objetoItem = new Item();
                        Elements interno_ip = elementos.getElementsByClass("ip");
                        Elements interno_sumary = elementos.getElementsByClass("search-result-summary");
                        for (Element el : interno_ip) {
                            String[] data_split = el.html().split("\"");
                            ip_ = data_split[1];
                            server_ = data_split[2];
                            objetoItem.setNombre("Server(" + indice + ") " + server_.substring(1, server_.length() - 4).replace("</a>","").replace("<a h","") + "\n IP(" + indice + ")  " + ip_.replace("/host/",""));
                            objetoItem.setDireccion_ip(ip_.replace("/host/",""));
                            indice++;

                        }
                        String ciudad = "";
                        for (Element el : interno_sumary) {

                            for (Element d : el.getElementsByClass("city")) {
                                ciudad = ciudad + d.html()+"-";
                            }

                        }
                        objetoItem.setNombre(objetoItem.getNombre()+"\n PAIS: "+ciudad.substring(0, ciudad.length() - 1));
                        lista_.add(objetoItem);
                        //System.out.println("yury : AgregadO: "+objetoItem.getNombre()+"\n PAIS: "+ciudad.substring(0, ciudad.length() - 1));


                    }


                    mAdapter.updateShodan(lista_);


                } catch (Exception e) {
e.printStackTrace();
                }


            }
        });

        return rootView;
    }
    private void disableSSLCertCheck() throws NoSuchAlgorithmException, KeyManagementException {
        // Create a trust manager that does not validate certificate chains
        TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }
            public void checkClientTrusted(X509Certificate[] certs, String authType) {
            }
            public void checkServerTrusted(X509Certificate[] certs, String authType) {
            }
        }
        };

        // Install the all-trusting trust manager
        SSLContext sc = SSLContext.getInstance("SSL");
        sc.init(null, trustAllCerts, new java.security.SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

        // Create all-trusting host name verifier
        HostnameVerifier allHostsValid = new HostnameVerifier() {
            public boolean verify(String hostname, SSLSession session) {
                return true;
            }
        };

        // Install the all-trusting host verifier
        HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
    }
}
